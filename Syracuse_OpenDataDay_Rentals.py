# -*- coding: utf-8 -*-
"""PAI724 - Midterm/OpenDataDay

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eyxc4OZ8WqUckA_Cc0N0Ej-6PHAd51zk
"""

import pandas as pd

import matplotlib.pyplot as plt

import seaborn as sns

import numpy as np

#cleaning the data in Rental Registry
Parcel_Map = pd.read_csv("Parcel_Map.csv")

Parcel_Map.head()

# leave only rows with the Syracuse zip: https://data.syr.gov/datasets/37450ae10e604b9495c4e00dd48e6622/explore?showTable=true
Parcel_Map = Parcel_Map[Parcel_Map["Zip"].isin(["13208", "13206", "13204", "13203", "13224", "13210", "13219", "13202", "13205", "13207", "13215", "13214"])]
Parcel_Map.head()

print(Parcel_Map['LUCat_Old'])

#Filter by Syracuse-specific zip codes?
Parcel_Map_filter = Parcel_Map[Parcel_Map["Zip"].isin(["13208", "13206", "13204", "13203", "13224", "13210", "13219", "13202", "13205", "13207", "13215", "13214"])]
Parcel_Map_filter = Parcel_Map_filter[Parcel_Map_filter['LUCat_Old'].notna()] #check for missing variables

#Pivot
pivot_table = Parcel_Map_filter.pivot_table(index='Zip', columns='LUCat_Old', aggfunc='size', fill_value=0)
pivot_table['Total_Properties'] = pivot_table.sum(axis=1) #for sum rows, axis = 1

#percentage
pivot_table_percent = pivot_table.div(pivot_table['Total_Properties'], axis=0) * 100

#rounding
pivot_table_percent = pivot_table_percent.round(2)
print(pivot_table_percent)

# Creating a pivot table with counting properties
pivot_table = Parcel_Map_filter.pivot_table(index='Zip', columns='LUCat_Old', aggfunc='size', fill_value=0)


household_columns = ['Apartment', 'Multiple Residence', 'Single Family', 'Three Family', 'Two Family']
pivot_table['Total_Households'] = pivot_table[household_columns].sum(axis=1)


# Display the pivot table with raw property counts
print(pivot_table)

#
Parcel_Map.LUCat_Old.value_counts()

Parcel_Map.dropna(inplace = True)

#deleting unnecessary values
dropthese = Parcel_Map[Parcel_Map['LUCat_Old'].isin(['Commercial', 'Utilities', 'Vacant Land','Industrial', 'Community Services','Parking', 'Religious', 'Parks', 'Schools', 'Recreation'])].index

Parcel_Map_dropped = Parcel_Map.drop(dropthese)

Parcel_Map_dropped

print(Parcel_Map["NHOOD"])

#creating a new table total residential houses in each neighborhood
df1 = Parcel_Map_dropped.groupby('Zip').size().reset_index(name="Total")
df1

"""Working with the next dataset Rental_Registry"""

#Working with the next dataset Rental_Registry
Rental_Registry = pd.read_csv("Rental_Registry.csv")
Rental_Registry.head(10)

Rental_Registry.columns

#creating a new table based on that data
df2 = Rental_Registry.groupby('zip').size().reset_index(name='Rented')
df2 = df2.rename(columns={'zip': 'Zip'})
df2.head(12)

#Working with the next dataset Code_Violations
Code_Violations = pd.read_csv("Code_Violations.csv")
Code_Violations.head()

#leaving only rows with the Syracuse zip: https://data.syr.gov/datasets/37450ae10e604b9495c4e00dd48e6622/explore?showTable=true
Code_Violations[Code_Violations["complaint_zip"].isin(["13208", "13206", "13204", "13203", "13224", "13210", "13219", "13202", "13205", "13207", "13215"])]
Code_Violations.head()

df3 = Code_Violations.groupby('complaint_zip').size().reset_index(name='Violations')
df3 = df3.rename(columns={'complaint_zip': 'Zip'})
df3.head(12)

print(df3.dtypes)

df3['Zip'] = df3['Zip'].astype(str)

#matching addresses
comparison = pd.merge(Rental_Registry, Code_Violations,
                      left_on='PropertyAddress', right_on='complaint_address',
                      how='inner')

# matching owners
comparison['owner_match'] = comparison.apply(
    lambda row: row['pc_owner'] == row['owner_name'] or row['RR_contact_name'] == row['owner_name'], axis=1)

#filter and count matches
matches = comparison[comparison['owner_match']]
matches_count = matches.groupby('complaint_zip').size().reset_index(name='Total Rented')
# merging two tables
final_result = pd.merge(Code_Violations, matches_count, on='complaint_zip', how='left')
final_result['Total Rented'] = final_result['Total Rented'].fillna(0)

# the number of violations by zipc
total_violations = Code_Violations.groupby('complaint_zip').size().reset_index(name='Total Code_Violations')

# code violations in rented
rented_violations = matches.groupby('complaint_zip').size().reset_index(name='Violations in Rented')
final_table = pd.merge(total_violations, rented_violations, on='complaint_zip', how='left')
final_table['Violations in Rented'] = final_table['Violations in Rented'].fillna(0).astype(int)
final_table.rename(columns = {'complaint_zip':'Zip'}, inplace = True)
print(final_table)

print(final_table.dtypes)



extracted_col = final_table["Violations in Rented"]
df = df2.copy()
df = pd.concat([df, extracted_col.rename("Violations in Rented")], axis=1)
print(df)

print(df.describe())

income = pd.read_csv("Income.csv", header=1, skiprows=0)
income.head()

income['Geographic Area Name'] = income['Geographic Area Name'].str.replace('ZCTA5 ', '')
income.rename(columns={'Geographic Area Name': 'Zip'}, inplace=True)
income.head()

#leaving only rows with the Syracuse zip: https://data.syr.gov/datasets/37450ae10e604b9495c4e00dd48e6622/explore?showTable=true
income = income[income["Zip"].isin(["13208", "13206", "13204", "13203", "13224", "13210", "13219", "13202", "13205", "13207", "13215", "13214"])]
income.head(11)

#Estimate!!Households!!Mean income (dollars)

income=income[['Zip', 'Estimate!!Households!!Mean income (dollars)']]
income.rename(columns = {'Estimate!!Households!!Mean income (dollars)':'Estimated Income'}, inplace = True)
income.head(12)

df4 = pd.merge(df3, income, on='Zip', how='left')
print(df4.columns)

df4['Estimated Income'] = pd.to_numeric(df4['Estimated Income'], errors='coerce')
df4['Violations'] = pd.to_numeric(df4['Violations'], errors='coerce')
df4['Share Violations'] = (df4['Violations'] / df4['Violations'].sum()) * 100
df4['Share Violations'] = df4['Share Violations'].apply(lambda x: f"{x:.2f}%")
df4['Share Income'] = (df4['Estimated Income'] / df4['Estimated Income'].sum()) * 100
df4['Share Income'] = df4['Share Income'].apply(lambda x: f"{x:.2f}%")
print(df4)

df4['Zip'] = df4['Zip'].astype('category')
scatter = sns.scatterplot(x='Estimated Income', y='Violations', hue='Zip', palette='viridis', data=df4, s=100)
plt.title('Scatter Plot of Violations vs. Estimated Income by ZIP Code')
plt.xlabel('Estimated Income ($)')
plt.ylabel('Violations')
plt.grid(True)
plt.legend(title='ZIP Code', bbox_to_anchor=(1.05, 1), loc='upper left')

plt.show()

df5 = pd.merge(df4, pivot_table, on='Zip', how='left')
print(df5.columns)

df5 = df5[['Zip', 'Violations', 'Total_Households', 'Estimated Income']]
print(df5)

scatter_plot = sns.scatterplot(x='Rented', y='Violations in Rented', data=df, s=100, color='blue')
plt.title('Scatter Plot of Violations vs. Rented Properties')
plt.xlabel('Number of Rented Properties')
plt.ylabel('Number of Violations')
plt.grid(True)
plt.show()

scatter_plot = sns.scatterplot(x='Rented', y='Violations in Rented', hue='Zip', palette='viridis', data=df, s=150, legend = 'full')
plt.title('Scatter Plot of Violations vs Rented Properties by ZIP Code')
plt.xlabel('Number of Rented Properties')
plt.ylabel('Number of Violations')
plt.grid(True)
plt.legend(title='ZIP Code')
plt.show() #note fix legends

df4['Zip'] = df4['Zip'].astype('category')


df_melted = df4.melt(id_vars='Zip', value_vars=['Violations', 'Estimated Income'], var_name='Category', value_name='Value') #melt
plt.figure(figsize=(12, 8))
sns.barplot(data=df_melted, x='Zip', y='Value', hue='Category')
plt.title('Comparison of Violations and Estimated Income by ZIP Code')
plt.xlabel('ZIP Code')
plt.ylabel('Count/Income')
plt.xticks(rotation=45)
plt.legend(title='Category')
plt.tight_layout()
plt.show()

df5_sorted = df5.sort_values(by='Estimated Income', ascending=True)
df_melted = df5_sorted.melt(id_vars='Zip', value_vars=['Violations', 'Total_Households', 'Estimated Income'], var_name='Category', value_name='Value')
order = df5_sorted['Zip'].tolist() #melt to change from wide to long, required for this type of plot
plt.figure(figsize=(14, 8))
sns.barplot(data=df_melted, x='Zip', y='Value', hue='Category', palette='viridis', order=order)
plt.title('Comparison of Violations, Total_Households, and Estimated Income by ZIP Code')
plt.xlabel('ZIP Code')
plt.ylabel('Value')
plt.xticks(rotation=45)
plt.show()

print(df5.describe())